/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package supermarket;

import java.awt.Toolkit;
import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import javax.swing.JOptionPane;

/**
 *
 * @author Varunraj
 */
public class emp extends javax.swing.JFrame {

    /**
     * Creates new form emp
     */
    int flag=0;
    
    public emp() {
        initComponents();
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("fav.png")));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        user = new javax.swing.JTextField();
        empname = new javax.swing.JTextField();
        salary = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        exit = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        empid = new javax.swing.JTextField();
        pass = new javax.swing.JTextField();
        mobile = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        address = new javax.swing.JTextArea();
        refresh = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        designation = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        insert = new javax.swing.JButton();
        joining = new com.toedter.calendar.JDateChooser();
        update = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        del = new javax.swing.JButton();
        birth = new com.toedter.calendar.JDateChooser();
        jLabel1 = new javax.swing.JLabel();
        search = new javax.swing.JButton();
        new1 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(198, 227, 240));

        user.setFont(new java.awt.Font("Arial Narrow", 0, 18)); // NOI18N

        empname.setFont(new java.awt.Font("Arial Narrow", 0, 18)); // NOI18N
        empname.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                empnameKeyTyped(evt);
            }
        });

        salary.setFont(new java.awt.Font("Arial Narrow", 0, 18)); // NOI18N
        salary.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salaryActionPerformed(evt);
            }
        });
        salary.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                salaryKeyTyped(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Arial Narrow", 0, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(29, 71, 121));
        jLabel3.setText("Employee Name:");

        jLabel10.setFont(new java.awt.Font("Arial Narrow", 0, 18)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(29, 71, 121));
        jLabel10.setText("Username:");

        jLabel4.setFont(new java.awt.Font("Arial Narrow", 0, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(29, 71, 121));
        jLabel4.setText("Designaion:");

        exit.setFont(new java.awt.Font("Arial Narrow", 0, 18)); // NOI18N
        exit.setText("EXIT");
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Arial Narrow", 0, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(29, 71, 121));
        jLabel2.setText("Employee ID:");

        jLabel7.setFont(new java.awt.Font("Arial Narrow", 0, 18)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(29, 71, 121));
        jLabel7.setText("Mobile Number:");

        empid.setFont(new java.awt.Font("Arial Narrow", 0, 18)); // NOI18N
        empid.setText("0");
        empid.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                empidInputMethodTextChanged(evt);
            }
        });
        empid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                empidActionPerformed(evt);
            }
        });
        empid.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                empidKeyTyped(evt);
            }
        });

        pass.setFont(new java.awt.Font("Arial Narrow", 0, 18)); // NOI18N

        mobile.setFont(new java.awt.Font("Arial Narrow", 0, 18)); // NOI18N
        mobile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mobileActionPerformed(evt);
            }
        });
        mobile.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                mobileKeyTyped(evt);
            }
        });

        address.setColumns(20);
        address.setFont(new java.awt.Font("Arial Narrow", 0, 18)); // NOI18N
        address.setRows(5);
        jScrollPane1.setViewportView(address);

        refresh.setFont(new java.awt.Font("Arial Narrow", 0, 18)); // NOI18N
        refresh.setText("REFRESH");
        refresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Arial Narrow", 0, 18)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(29, 71, 121));
        jLabel8.setText("Date of Birth:");

        designation.setFont(new java.awt.Font("Arial Narrow", 0, 18)); // NOI18N
        designation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                designationActionPerformed(evt);
            }
        });
        designation.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                designationKeyTyped(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Arial Narrow", 0, 18)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(29, 71, 121));
        jLabel9.setText("Joining Date:");

        jLabel11.setFont(new java.awt.Font("Arial Narrow", 0, 18)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(29, 71, 121));
        jLabel11.setText("Password:");

        insert.setFont(new java.awt.Font("Arial Narrow", 0, 18)); // NOI18N
        insert.setText("INSERT");
        insert.setEnabled(false);
        insert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertActionPerformed(evt);
            }
        });

        joining.setFont(new java.awt.Font("Arial Narrow", 0, 18)); // NOI18N

        update.setFont(new java.awt.Font("Arial Narrow", 0, 18)); // NOI18N
        update.setText("UPDATE");
        update.setEnabled(false);
        update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Arial Narrow", 0, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(29, 71, 121));
        jLabel5.setText("Address:");

        del.setFont(new java.awt.Font("Arial Narrow", 0, 18)); // NOI18N
        del.setText("DELETE");
        del.setEnabled(false);
        del.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delActionPerformed(evt);
            }
        });

        birth.setFont(new java.awt.Font("Arial Narrow", 0, 18)); // NOI18N

        jLabel1.setFont(new java.awt.Font("Arial Narrow", 0, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(29, 71, 121));
        jLabel1.setText("Employee Manager");

        search.setFont(new java.awt.Font("Arial Narrow", 0, 18)); // NOI18N
        search.setText("SEARCH");
        search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchActionPerformed(evt);
            }
        });

        new1.setFont(new java.awt.Font("Arial Narrow", 0, 18)); // NOI18N
        new1.setText("NEW");
        new1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                new1ActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Arial Narrow", 0, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(29, 71, 121));
        jLabel6.setText("Salary:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(44, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel11)
                                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel9)
                                    .addComponent(jLabel8)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel6)
                                    .addComponent(insert, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(salary)
                            .addComponent(designation)
                            .addComponent(empid)
                            .addComponent(empname)
                            .addComponent(mobile)
                            .addComponent(birth, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(joining, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(user)
                            .addComponent(pass)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(update, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(del, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1)))
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 327, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(new1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(search, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(refresh, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(exit, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(empid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(search, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(empname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(new1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(designation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(refresh, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(exit, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(salary, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mobile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(birth, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(joining, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(user, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(pass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(insert, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(update, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(del, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jLabel11)))
                    .addComponent(jLabel9))
                .addGap(13, 13, 13))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void empidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_empidActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_empidActionPerformed

    private void designationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_designationActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_designationActionPerformed

    private void salaryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salaryActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_salaryActionPerformed

    private void new1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_new1ActionPerformed
        // TODO add your handling code here:
        clearall();
        empid.setText("Generating new ID....");
        insert.setEnabled(true);
        empid.setEditable(false);
        del.setEnabled(false);
        update.setEnabled(false);
    }//GEN-LAST:event_new1ActionPerformed

    private void delActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delActionPerformed
        // TODO add your handling code here:
        Connection conn= DBConnection.connect();
        if(conn != null)
        {
            String sql;
                sql = "delete from employee where emp_id=?;";
                try{
                    PreparedStatement stat;
                    stat= conn.prepareStatement(sql);
                    stat.setInt(1,Integer.parseInt(empid.getText()));                    
                    int rowupdate= stat.executeUpdate();
                    if (rowupdate>0) {
                        JOptionPane.showMessageDialog(null, "Employee Deleted");
                        clearall();
                        empid.setEditable(true);
                    }
                    else
                    {
                        JOptionPane.showMessageDialog(null, "Not Deleted");
                    }
                }
                catch(SQLException ex)
                {
                
                }
        }
         else
            {
                JOptionPane.showMessageDialog(null, "Not connected");
            }
    }//GEN-LAST:event_delActionPerformed

    private void insertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertActionPerformed
        // TODO add your handling code here:
        int er=0;
        if(!empname.getText().equals("") && !designation.getText().equals("") && !address.getText().equals("") && !salary.getText().equals("") && !mobile.getText().equals("") && !user.getText().equals("") && !pass.getText().equals("") && birth.getDate()!=null && joining.getDate()!=null)
        {    
        String moblen=mobile.getText();
        int lenmob=moblen.length();
        if(lenmob==10)
        {
            Connection conn= DBConnection.connect();
            if(conn != null)
            {
            String sql;
                sql = "insert into employee(empname,desig,address,sal,mob,dob,join_date,username,password) values(?,?,?,?,?,?,?,?,?);";
                try{
                    SimpleDateFormat df=new SimpleDateFormat("yyyy-MM-dd");
                    PreparedStatement stat;
                    stat= conn.prepareStatement(sql);
                    stat.setString(1,empname.getText());
                    stat.setString(2,designation.getText());
                    stat.setString(3,address.getText());
                    try {
                        stat.setFloat(4,Float.parseFloat(salary.getText()));
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, "Salary can contain only one Decimal Point");
                        er=1;
                    }                    
                    stat.setLong(5,Long.parseLong(mobile.getText()));
                    stat.setDate(6,Date.valueOf(df.format(birth.getDate())));
                    stat.setDate(7,Date.valueOf(df.format(joining.getDate())));
                    stat.setString(8,user.getText());
                    stat.setString(9,pass.getText());
                    int rowupdate= stat.executeUpdate();
                    if (rowupdate>0) {
                        int id=lastid();
                        JOptionPane.showMessageDialog(null, "Employee ID: "+id+"  was inserted");
                        clearall();
                        empid.setEditable(true);
                    }
                    else
                    {
                        JOptionPane.showMessageDialog(null, "Not Added");
                    }
                }
                catch(SQLException ex)
                {
                    if(er==0)
                        JOptionPane.showMessageDialog(null, "This Username is Not Available..");
                }
            }
         else
            {
                JOptionPane.showMessageDialog(null, "Not connected");
            }
        }
        else
        {
            JOptionPane.showMessageDialog(null, "Enter Valid Mobile Number.");
        }
    
        }
        else
        {
             JOptionPane.showMessageDialog(null, "Enetr Valid Data");
        }
       
        
    }//GEN-LAST:event_insertActionPerformed

    private void searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchActionPerformed
        // TODO add your handling code here:
     insert.setEnabled(false);
     
     Connection conn= DBConnection.connect();
      if(conn != null)
        {
                String sql;
                sql = "select * from employee where emp_id=?;";
                try{
                    PreparedStatement stat;
                    stat= conn.prepareStatement(sql);
                    stat.setInt(1,Integer.parseInt(empid.getText()));
                    ResultSet rs=null;
                    rs=stat.executeQuery();
                        if(rs.next())
                        {
                           del.setEnabled(true);
                           empid.setEditable(false);
                           update.setEnabled(true);
                           
                           empname.setText(rs.getString("empname"));
                           designation.setText(rs.getString("desig"));
                           address.setText(rs.getString("address"));
                           salary.setText(String.valueOf(rs.getFloat("sal")));
                           mobile.setText(String.valueOf(rs.getLong("mob")));
                           birth.setDate(rs.getDate("dob"));
                           joining.setDate(rs.getDate("join_date"));
                           user.setText(rs.getString("username"));
                           pass.setText(rs.getString("password"));                          
                        }
                        else
                        {
                            JOptionPane.showMessageDialog(null, "Not Found");
                            clearall();
                            empid.setEditable(true);
                        }
                }
                catch(SQLException ex)
                {
                    JOptionPane.showMessageDialog(null, "Please Enter Employee ID..");
                }
        }
         else
            {
                JOptionPane.showMessageDialog(null, "Not connected");
            }
    }//GEN-LAST:event_searchActionPerformed

    private void updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateActionPerformed
        // TODO add your handling code here:
        int er=0;
        if(!empname.getText().equals("") && !designation.getText().equals("") && !address.getText().equals("") && !salary.getText().equals("") && !mobile.getText().equals("") && !user.getText().equals("") && !pass.getText().equals("") && birth.getDate()!=null && joining.getDate()!=null)
        { 
        Connection conn= DBConnection.connect();
        if(conn != null)
        {
            String sql;
                sql = "update employee set empname=?,desig=?,address=?,sal=?,mob=?,dob=?,join_date=?,username=?,password=? where emp_id=?;";
                try{
                    SimpleDateFormat df=new SimpleDateFormat("yyyy-MM-dd");
                    PreparedStatement stat;
                    stat= conn.prepareStatement(sql);
                    stat.setString(1,empname.getText());
                    stat.setString(2,designation.getText());
                    stat.setString(3,address.getText());
                    try {
                        stat.setFloat(4,Float.parseFloat(salary.getText()));
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, "Salary can contain only one Decimal Point");
                        er=1;
                    }
                    stat.setLong(5,Long.parseLong(mobile.getText()));
                    stat.setDate(6,Date.valueOf(df.format(birth.getDate())));
                    stat.setDate(7,Date.valueOf(df.format(joining.getDate())));
                    stat.setString(8,user.getText());
                    stat.setString(9,pass.getText());
                    stat.setInt(10,Integer.parseInt(empid.getText()));
                    int rowupdate= stat.executeUpdate();
                    if (rowupdate>0) {
                        JOptionPane.showMessageDialog(null, "Employee Updated");
                        clearall();
                        empid.setEditable(true);
                    }
                    else
                    {
                        JOptionPane.showMessageDialog(null, "Not Updated");                        
                    }
                }
                catch(SQLException ex)
                {
                    if(er==0)
                        JOptionPane.showMessageDialog(null, "This Username is Not Available..");
                }
        }
         else
            {
                JOptionPane.showMessageDialog(null, "Not connected");
            }
        }
        else
        {
             JOptionPane.showMessageDialog(null, "Enetr Valid Data");
        }
    }//GEN-LAST:event_updateActionPerformed

    private void refreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshActionPerformed
        // TODO add your handling code here:
        clearall();
        empid.setEditable(true);
        empid.setText("0");
        insert.setEnabled(false);
        del.setEnabled(false);
        update.setEnabled(false);
        
    }//GEN-LAST:event_refreshActionPerformed

    private void empidInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_empidInputMethodTextChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_empidInputMethodTextChanged

    private void empidKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_empidKeyTyped
        // TODO add your handling code here:
        
        char c=evt.getKeyChar();
        if(( !Character.isDigit(c)||((evt.getKeyCode()== evt.VK_BACK_SPACE))))
        {
            evt.consume();
        }
    }//GEN-LAST:event_empidKeyTyped

    private void salaryKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_salaryKeyTyped
        // TODO add your handling code here:
          char c=evt.getKeyChar();
        if((c!='0' && c!='1' && c!='2' && c!='3' && c!='4' && c!='5' && c!='6' && c!='7' && c!='8' && c!='9' && c!='.'))
        {
            evt.consume();
        }
    }//GEN-LAST:event_salaryKeyTyped

    private void mobileKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_mobileKeyTyped
        // TODO add your handling code here:
           char c=evt.getKeyChar();
        if(( !Character.isDigit(c)||((evt.getKeyCode()== evt.VK_BACK_SPACE))))
        {
            evt.consume();
        }
    }//GEN-LAST:event_mobileKeyTyped

    private void empnameKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_empnameKeyTyped
        // TODO add your handling code here:
        char c=evt.getKeyChar();
        if(( Character.isDigit(c)||((evt.getKeyCode()== evt.VK_BACK_SPACE))))
        {
            evt.consume();
        }
    }//GEN-LAST:event_empnameKeyTyped

    private void designationKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_designationKeyTyped
        // TODO add your handling code here:
        char c=evt.getKeyChar();
        if(( Character.isDigit(c)||((evt.getKeyCode()== evt.VK_BACK_SPACE))))
        {
            evt.consume();
        }
    }//GEN-LAST:event_designationKeyTyped

    private void mobileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mobileActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mobileActionPerformed

    private void exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_exitActionPerformed

    public void clearall()
    {
        empid.setText("0");
        empname.setText("");
        empname.setText("");
        designation.setText("");
        address.setText("");
        salary.setText("");
        mobile.setText("");
        birth.setCalendar(null);
        joining.setCalendar(null);
        user.setText("");
        pass.setText(""); 
        insert.setEnabled(false);
        update.setEnabled(false);
        del.setEnabled(false);
        
    }
    
    public int lastid()
    {
        int x=0;
        Connection conn= DBConnection.connect();
        if(conn != null)
        {
            String sql;
            sql = "select max(emp_id) from employee;";
              try{
                    Statement stat=conn.createStatement();
                    ResultSet rs=stat.executeQuery(sql);
                        if(rs.next())
                        {
                               x=rs.getInt(1);                    
                        }
                        else
                        {
                            JOptionPane.showMessageDialog(null, "Not Found");
                        }
                }
                catch(SQLException ex)
                {
                  
                }
        }
         else
            {
                JOptionPane.showMessageDialog(null, "Not connected");
            }
        return x;
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(emp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(emp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(emp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(emp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new emp().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea address;
    private com.toedter.calendar.JDateChooser birth;
    private javax.swing.JButton del;
    private javax.swing.JTextField designation;
    private javax.swing.JTextField empid;
    private javax.swing.JTextField empname;
    private javax.swing.JButton exit;
    private javax.swing.JButton insert;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private com.toedter.calendar.JDateChooser joining;
    private javax.swing.JTextField mobile;
    private javax.swing.JButton new1;
    private javax.swing.JTextField pass;
    private javax.swing.JButton refresh;
    private javax.swing.JTextField salary;
    private javax.swing.JButton search;
    private javax.swing.JButton update;
    private javax.swing.JTextField user;
    // End of variables declaration//GEN-END:variables
}
